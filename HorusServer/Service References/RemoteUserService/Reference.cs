//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HorusServer.RemoteUserService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceController", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceProcess")]
    [System.SerializableAttribute()]
    public partial class ServiceController : System.ComponentModel.Component, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HorusServer.RemoteUserService.ServiceController[] DependentServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private HorusServer.RemoteUserService.ServiceController[] ServicesDependedOnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HorusServer.RemoteUserService.ServiceController[] DependentServices {
            get {
                return this.DependentServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.DependentServicesField, value) != true)) {
                    this.DependentServicesField = value;
                    this.RaisePropertyChanged("DependentServices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public HorusServer.RemoteUserService.ServiceController[] ServicesDependedOn {
            get {
                return this.ServicesDependedOnField;
            }
            set {
                if ((object.ReferenceEquals(this.ServicesDependedOnField, value) != true)) {
                    this.ServicesDependedOnField = value;
                    this.RaisePropertyChanged("ServicesDependedOn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteUserService.IClientSideService")]
    public interface IClientSideService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/GetHostName", ReplyAction="http://tempuri.org/IClientSideService/GetHostNameResponse")]
        string GetHostName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/GetHostName", ReplyAction="http://tempuri.org/IClientSideService/GetHostNameResponse")]
        System.Threading.Tasks.Task<string> GetHostNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/GetComputer", ReplyAction="http://tempuri.org/IClientSideService/GetComputerResponse")]
        HorusShared.ComputerObjects.Computer GetComputer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/GetComputer", ReplyAction="http://tempuri.org/IClientSideService/GetComputerResponse")]
        System.Threading.Tasks.Task<HorusShared.ComputerObjects.Computer> GetComputerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/Ping", ReplyAction="http://tempuri.org/IClientSideService/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/Ping", ReplyAction="http://tempuri.org/IClientSideService/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/StartProcess", ReplyAction="http://tempuri.org/IClientSideService/StartProcessResponse")]
        void StartProcess(string ProcessName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/StartProcess", ReplyAction="http://tempuri.org/IClientSideService/StartProcessResponse")]
        System.Threading.Tasks.Task StartProcessAsync(string ProcessName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/EndProcess", ReplyAction="http://tempuri.org/IClientSideService/EndProcessResponse")]
        void EndProcess(string ProcessName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/EndProcess", ReplyAction="http://tempuri.org/IClientSideService/EndProcessResponse")]
        System.Threading.Tasks.Task EndProcessAsync(string ProcessName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/StartService", ReplyAction="http://tempuri.org/IClientSideService/StartServiceResponse")]
        void StartService(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/StartService", ReplyAction="http://tempuri.org/IClientSideService/StartServiceResponse")]
        System.Threading.Tasks.Task StartServiceAsync(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/EndService", ReplyAction="http://tempuri.org/IClientSideService/EndServiceResponse")]
        void EndService(string ServiceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientSideService/EndService", ReplyAction="http://tempuri.org/IClientSideService/EndServiceResponse")]
        System.Threading.Tasks.Task EndServiceAsync(string ServiceName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientSideServiceChannel : HorusServer.RemoteUserService.IClientSideService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientSideServiceClient : System.ServiceModel.ClientBase<HorusServer.RemoteUserService.IClientSideService>, HorusServer.RemoteUserService.IClientSideService {
        
        public ClientSideServiceClient() {
        }
        
        public ClientSideServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientSideServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientSideServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientSideServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetHostName() {
            return base.Channel.GetHostName();
        }
        
        public System.Threading.Tasks.Task<string> GetHostNameAsync() {
            return base.Channel.GetHostNameAsync();
        }
        
        public HorusShared.ComputerObjects.Computer GetComputer() {
            return base.Channel.GetComputer();
        }
        
        public System.Threading.Tasks.Task<HorusShared.ComputerObjects.Computer> GetComputerAsync() {
            return base.Channel.GetComputerAsync();
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public void StartProcess(string ProcessName) {
            base.Channel.StartProcess(ProcessName);
        }
        
        public System.Threading.Tasks.Task StartProcessAsync(string ProcessName) {
            return base.Channel.StartProcessAsync(ProcessName);
        }
        
        public void EndProcess(string ProcessName) {
            base.Channel.EndProcess(ProcessName);
        }
        
        public System.Threading.Tasks.Task EndProcessAsync(string ProcessName) {
            return base.Channel.EndProcessAsync(ProcessName);
        }
        
        public void StartService(string ServiceName) {
            base.Channel.StartService(ServiceName);
        }
        
        public System.Threading.Tasks.Task StartServiceAsync(string ServiceName) {
            return base.Channel.StartServiceAsync(ServiceName);
        }
        
        public void EndService(string ServiceName) {
            base.Channel.EndService(ServiceName);
        }
        
        public System.Threading.Tasks.Task EndServiceAsync(string ServiceName) {
            return base.Channel.EndServiceAsync(ServiceName);
        }
    }
}
