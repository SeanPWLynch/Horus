//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HorusAdmin.Horus {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Horus.IServerAdminService")]
    public interface IServerAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/GetClients", ReplyAction="http://tempuri.org/IServerAdminService/GetClientsResponse")]
        string[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/GetClients", ReplyAction="http://tempuri.org/IServerAdminService/GetClientsResponse")]
        System.Threading.Tasks.Task<string[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/StartRemoteProcess", ReplyAction="http://tempuri.org/IServerAdminService/StartRemoteProcessResponse")]
        void StartRemoteProcess(string ProcessName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/StartRemoteProcess", ReplyAction="http://tempuri.org/IServerAdminService/StartRemoteProcessResponse")]
        System.Threading.Tasks.Task StartRemoteProcessAsync(string ProcessName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/EndRemoteProcess", ReplyAction="http://tempuri.org/IServerAdminService/EndRemoteProcessResponse")]
        void EndRemoteProcess(string ProcessName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/EndRemoteProcess", ReplyAction="http://tempuri.org/IServerAdminService/EndRemoteProcessResponse")]
        System.Threading.Tasks.Task EndRemoteProcessAsync(string ProcessName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/StartRemoteService", ReplyAction="http://tempuri.org/IServerAdminService/StartRemoteServiceResponse")]
        void StartRemoteService(string ServiceName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/StartRemoteService", ReplyAction="http://tempuri.org/IServerAdminService/StartRemoteServiceResponse")]
        System.Threading.Tasks.Task StartRemoteServiceAsync(string ServiceName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/EndRemoteService", ReplyAction="http://tempuri.org/IServerAdminService/EndRemoteServiceResponse")]
        void EndRemoteService(string ServiceName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/EndRemoteService", ReplyAction="http://tempuri.org/IServerAdminService/EndRemoteServiceResponse")]
        System.Threading.Tasks.Task EndRemoteServiceAsync(string ServiceName, string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/GetHostName", ReplyAction="http://tempuri.org/IServerAdminService/GetHostNameResponse")]
        string GetHostName(string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/GetHostName", ReplyAction="http://tempuri.org/IServerAdminService/GetHostNameResponse")]
        System.Threading.Tasks.Task<string> GetHostNameAsync(string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/GetComputer", ReplyAction="http://tempuri.org/IServerAdminService/GetComputerResponse")]
        HorusShared.ComputerObjects.Computer GetComputer(string targetMachine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdminService/GetComputer", ReplyAction="http://tempuri.org/IServerAdminService/GetComputerResponse")]
        System.Threading.Tasks.Task<HorusShared.ComputerObjects.Computer> GetComputerAsync(string targetMachine);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerAdminServiceChannel : HorusAdmin.Horus.IServerAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerAdminServiceClient : System.ServiceModel.ClientBase<HorusAdmin.Horus.IServerAdminService>, HorusAdmin.Horus.IServerAdminService {
        
        public ServerAdminServiceClient() {
        }
        
        public ServerAdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerAdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerAdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerAdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<string[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public void StartRemoteProcess(string ProcessName, string targetMachine) {
            base.Channel.StartRemoteProcess(ProcessName, targetMachine);
        }
        
        public System.Threading.Tasks.Task StartRemoteProcessAsync(string ProcessName, string targetMachine) {
            return base.Channel.StartRemoteProcessAsync(ProcessName, targetMachine);
        }
        
        public void EndRemoteProcess(string ProcessName, string targetMachine) {
            base.Channel.EndRemoteProcess(ProcessName, targetMachine);
        }
        
        public System.Threading.Tasks.Task EndRemoteProcessAsync(string ProcessName, string targetMachine) {
            return base.Channel.EndRemoteProcessAsync(ProcessName, targetMachine);
        }
        
        public void StartRemoteService(string ServiceName, string targetMachine) {
            base.Channel.StartRemoteService(ServiceName, targetMachine);
        }
        
        public System.Threading.Tasks.Task StartRemoteServiceAsync(string ServiceName, string targetMachine) {
            return base.Channel.StartRemoteServiceAsync(ServiceName, targetMachine);
        }
        
        public void EndRemoteService(string ServiceName, string targetMachine) {
            base.Channel.EndRemoteService(ServiceName, targetMachine);
        }
        
        public System.Threading.Tasks.Task EndRemoteServiceAsync(string ServiceName, string targetMachine) {
            return base.Channel.EndRemoteServiceAsync(ServiceName, targetMachine);
        }
        
        public string GetHostName(string targetMachine) {
            return base.Channel.GetHostName(targetMachine);
        }
        
        public System.Threading.Tasks.Task<string> GetHostNameAsync(string targetMachine) {
            return base.Channel.GetHostNameAsync(targetMachine);
        }
        
        public HorusShared.ComputerObjects.Computer GetComputer(string targetMachine) {
            return base.Channel.GetComputer(targetMachine);
        }
        
        public System.Threading.Tasks.Task<HorusShared.ComputerObjects.Computer> GetComputerAsync(string targetMachine) {
            return base.Channel.GetComputerAsync(targetMachine);
        }
    }
}
